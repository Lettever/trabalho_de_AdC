
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  0000032e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800246  00800246  00000508  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc7  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000594  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000269b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 34       	cpi	r26, 0x4B	; 75
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
  9e:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
					"\t5:   Imprimir MENU\n"};
 
void USART_Init(uint16_t ubrr)
{
	/* Set baud rate */
	UBRR0H = (uint8_t)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(ubrr & 0xFF);
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// enable the transmitter and receiver
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <UART_putc>:
}
void UART_putc(uint8_t data)
{
	// wait for transmit buffer to be empty
	while(!(UCSR0A & (1 << UDRE0)));
  ba:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  be:	95 ff       	sbrs	r25, 5
  c0:	fc cf       	rjmp	.-8      	; 0xba <UART_putc>
	// load data into transmit register
	UDR0 = data;
  c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c6:	08 95       	ret

000000c8 <UART_puts>:
}
void UART_puts(char* s)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	// transmit character until NULL is reached
	while(*s > 0)
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <UART_puts+0xe>
		UART_putc(*s++);
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	0e 94 5d 00 	call	0xba	; 0xba <UART_putc>
	UDR0 = data;
}
void UART_puts(char* s)
{
	// transmit character until NULL is reached
	while(*s > 0)
  d6:	88 81       	ld	r24, Y
  d8:	81 11       	cpse	r24, r1
  da:	fa cf       	rjmp	.-12     	; 0xd0 <UART_puts+0x8>
		UART_putc(*s++);
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <UART_getc>:
u8 UART_getc()
{
	// wait for data
	while(!(UCSR0A & (1 << RXC0)));
  e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e6:	88 23       	and	r24, r24
  e8:	e4 f7       	brge	.-8      	; 0xe2 <UART_getc>
	// return data
	return UDR0;
  ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  ee:	08 95       	ret

000000f0 <print_menu>:
void print_menu()
{
  f0:	cf 93       	push	r28
	UART_puts(line);
  f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <line>
  f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <line+0x1>
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
	for(u8 i = 0; i < 2; i++)
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	0b c0       	rjmp	.+22     	; 0x118 <print_menu+0x28>
		UART_puts(id[i]);
 102:	ec 2f       	mov	r30, r28
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	e6 5f       	subi	r30, 0xF6	; 246
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	80 81       	ld	r24, Z
 110:	91 81       	ldd	r25, Z+1	; 0x01
 112:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
	return UDR0;
}
void print_menu()
{
	UART_puts(line);
	for(u8 i = 0; i < 2; i++)
 116:	cf 5f       	subi	r28, 0xFF	; 255
 118:	c2 30       	cpi	r28, 0x02	; 2
 11a:	98 f3       	brcs	.-26     	; 0x102 <print_menu+0x12>
		UART_puts(id[i]);
	UART_puts(line);
 11c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <line>
 120:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <line+0x1>
 124:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
	for(u8 i = 0; i < 5; i++)
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	0b c0       	rjmp	.+22     	; 0x142 <print_menu+0x52>
		UART_puts(options[i]);
 12c:	ec 2f       	mov	r30, r28
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e0 50       	subi	r30, 0x00	; 0
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	91 81       	ldd	r25, Z+1	; 0x01
 13c:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
{
	UART_puts(line);
	for(u8 i = 0; i < 2; i++)
		UART_puts(id[i]);
	UART_puts(line);
	for(u8 i = 0; i < 5; i++)
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	c5 30       	cpi	r28, 0x05	; 5
 144:	98 f3       	brcs	.-26     	; 0x12c <print_menu+0x3c>
		UART_puts(options[i]);
	UART_puts(line);
 146:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <line>
 14a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <line+0x1>
 14e:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
	UART_puts(">> ");
 152:	81 e1       	ldi	r24, 0x11	; 17
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
}
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <get_option>:
u8 get_option()
{
 15e:	cf 93       	push	r28
	u8 result = UART_getc();
 160:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_getc>
 164:	c8 2f       	mov	r28, r24
	UART_putc(result + '0');
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	8c 0f       	add	r24, r28
 16a:	0e 94 5d 00 	call	0xba	; 0xba <UART_putc>
	if(('1' <= result && result <= '4') || (result == '9'))
 16e:	8f ec       	ldi	r24, 0xCF	; 207
 170:	8c 0f       	add	r24, r28
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	10 f0       	brcs	.+4      	; 0x17a <get_option+0x1c>
 176:	c9 33       	cpi	r28, 0x39	; 57
 178:	29 f4       	brne	.+10     	; 0x184 <get_option+0x26>
		UART_puts("OK\n");
 17a:	85 e1       	ldi	r24, 0x15	; 21
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
 182:	04 c0       	rjmp	.+8      	; 0x18c <get_option+0x2e>
	else
		UART_puts("Comando invalido\n");
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
	if(result != MENU_OPTION)
 18c:	c9 33       	cpi	r28, 0x39	; 57
 18e:	21 f0       	breq	.+8      	; 0x198 <get_option+0x3a>
		UART_puts(">> ");
 190:	81 e1       	ldi	r24, 0x11	; 17
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_puts>
	return result;
}
 198:	8c 2f       	mov	r24, r28
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <IO_init>:
void IO_init()
{
	DDRD = INPUT;
 19e:	1a b8       	out	0x0a, r1	; 10
	DDRB = OUTPUT;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	84 b9       	out	0x04, r24	; 4
 1a4:	08 95       	ret

000001a6 <UART_init>:
}
void UART_init()
{
	USART_Init(MYUBRR);
 1a6:	87 e6       	ldi	r24, 0x67	; 103
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
 1ae:	08 95       	ret

000001b0 <change_mode>:
}
void change_mode()
{
	if(mode == MANUAL)
 1b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	19 f4       	brne	.+6      	; 0x1be <change_mode+0xe>
		mode = AUTO;
 1b8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mode>
 1bc:	08 95       	ret
	else
		mode = MANUAL;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
 1c4:	08 95       	ret

000001c6 <do_manual_stuff>:
}
void do_manual_stuff()
{
	if(GET_BIT(input, MANUAL_PIN))
 1c6:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <input>
 1ca:	83 ff       	sbrs	r24, 3
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <do_manual_stuff+0x16>
		FLIP_BIT(output, RELE_PIN);
 1ce:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <__data_end>
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	89 27       	eor	r24, r25
 1d6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 1da:	08 95       	ret
	else if(UART_option == TURN_ON_OPTION)						//valor obtido no get_option()
 1dc:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <UART_option>
 1e0:	82 33       	cpi	r24, 0x32	; 50
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <do_manual_stuff+0x2a>
		SET_BIT(output, RELE_PIN);
 1e4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 1ee:	08 95       	ret
	else if(UART_option == TURN_OFF_OPTION)						//valor obtido no get_option()
 1f0:	83 33       	cpi	r24, 0x33	; 51
 1f2:	29 f4       	brne	.+10     	; 0x1fe <do_manual_stuff+0x38>
		RESET_BIT(output, RELE_PIN);
 1f4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 1f8:	8f 7d       	andi	r24, 0xDF	; 223
 1fa:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 1fe:	08 95       	ret

00000200 <do_auto_stuff>:
}
void do_auto_stuff()
{
	if(ldr < SET_POINT - (H / 2))
 200:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <ldr>
 204:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <ldr+0x1>
 208:	8c 39       	cpi	r24, 0x9C	; 156
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	92 07       	cpc	r25, r18
 20e:	30 f4       	brcc	.+12     	; 0x21c <do_auto_stuff+0x1c>
		SET_BIT(output, RELE_PIN);
 210:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 214:	80 62       	ori	r24, 0x20	; 32
 216:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 21a:	08 95       	ret
	else if(ldr > SET_POINT + (H / 2))
 21c:	85 36       	cpi	r24, 0x65	; 101
 21e:	92 40       	sbci	r25, 0x02	; 2
 220:	28 f0       	brcs	.+10     	; 0x22c <do_auto_stuff+0x2c>
		RESET_BIT(output, RELE_PIN);	
 222:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 226:	8f 7d       	andi	r24, 0xDF	; 223
 228:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 22c:	08 95       	ret

0000022e <set_colours>:
}
void set_colours()
{
	if(mode == MANUAL)
 22e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	39 f4       	brne	.+14     	; 0x244 <set_colours+0x16>
	{
		SET_BIT(output, BLUE_PIN);
 236:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 23a:	80 61       	ori	r24, 0x10	; 16
		RESET_BIT(output, RED_PIN);
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 242:	08 c0       	rjmp	.+16     	; 0x254 <set_colours+0x26>
	}
	else if(mode == AUTO)
 244:	81 11       	cpse	r24, r1
 246:	06 c0       	rjmp	.+12     	; 0x254 <set_colours+0x26>
	{
		SET_BIT(output, RED_PIN);
 248:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 24c:	84 60       	ori	r24, 0x04	; 4
		RESET_BIT(output, BLUE_PIN);
 24e:	8f 7e       	andi	r24, 0xEF	; 239
 250:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
	}
	if(GET_BIT(output, RELE_PIN))
 254:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 258:	85 ff       	sbrs	r24, 5
 25a:	04 c0       	rjmp	.+8      	; 0x264 <set_colours+0x36>
		SET_BIT(output, GREEN_PIN);
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 262:	08 95       	ret
	else
		RESET_BIT(output, GREEN_PIN);
 264:	87 7f       	andi	r24, 0xF7	; 247
 266:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 26a:	08 95       	ret

0000026c <ADC_init>:
}
void ADC_init()
{
	ADMUX |= (1 << REFS0);
 26c:	ec e7       	ldi	r30, 0x7C	; 124
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
 276:	ea e7       	ldi	r30, 0x7A	; 122
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 280:	80 81       	ld	r24, Z
 282:	87 60       	ori	r24, 0x07	; 7
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <read_ADC>:
}
u16 read_ADC(u8 channel)
{
	ADMUX = (ADMUX & 0x0F) | (channel = 0x0F);
 288:	ec e7       	ldi	r30, 0x7C	; 124
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	8f e0       	ldi	r24, 0x0F	; 15
 290:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 292:	ea e7       	ldi	r30, 0x7A	; 122
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
 29c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2a0:	86 fd       	sbrc	r24, 6
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <read_ADC+0x14>
	ADCSRA |= (1 << ADIF);
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 61       	ori	r24, 0x10	; 16
 2ac:	80 83       	st	Z, r24
	return ADC;
 2ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2b6:	08 95       	ret

000002b8 <main>:
u8 output = OFF;
u8 input;
 
int main(void)
{
	IO_init();
 2b8:	0e 94 cf 00 	call	0x19e	; 0x19e <IO_init>
	UART_init();
 2bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_init>
	ADC_init();
 2c0:	0e 94 36 01 	call	0x26c	; 0x26c <ADC_init>
	print_menu();
 2c4:	0e 94 78 00 	call	0xf0	; 0xf0 <print_menu>
	while(TRUE)
	{
		ldr = read_ADC(ADC_PIN); //ler ldr aqui
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 44 01 	call	0x288	; 0x288 <read_ADC>
 2ce:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <ldr+0x1>
 2d2:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <ldr>
		input = PIND;
 2d6:	89 b1       	in	r24, 0x09	; 9
 2d8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <input>
		if(UCSR0A & (1 << RXC0))
 2dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e0:	99 23       	and	r25, r25
 2e2:	2c f4       	brge	.+10     	; 0x2ee <main+0x36>
			UART_option = get_option();
 2e4:	0e 94 af 00 	call	0x15e	; 0x15e <get_option>
 2e8:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <UART_option>
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <main+0x44>
		else if(GET_BIT(input, CHANGE_MODE_PIN))
 2ee:	82 ff       	sbrs	r24, 2
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <main+0x40>
			change_mode();
 2f2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <change_mode>
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0x44>
		else
			UART_option = OFF;
 2f8:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <UART_option>
		if(mode == MANUAL)
 2fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	19 f4       	brne	.+6      	; 0x30a <main+0x52>
			do_manual_stuff();
 304:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <do_manual_stuff>
 308:	04 c0       	rjmp	.+8      	; 0x312 <main+0x5a>
		else if(mode == AUTO)
 30a:	81 11       	cpse	r24, r1
 30c:	02 c0       	rjmp	.+4      	; 0x312 <main+0x5a>
			do_auto_stuff();
 30e:	0e 94 00 01 	call	0x200	; 0x200 <do_auto_stuff>
		set_colours();
 312:	0e 94 17 01 	call	0x22e	; 0x22e <set_colours>
		PORTB = output;
 316:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 31a:	85 b9       	out	0x05, r24	; 5
		if(UART_option == MENU_OPTION)
 31c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <UART_option>
 320:	89 33       	cpi	r24, 0x39	; 57
 322:	91 f6       	brne	.-92     	; 0x2c8 <main+0x10>
			print_menu();
 324:	0e 94 78 00 	call	0xf0	; 0xf0 <print_menu>
 328:	cf cf       	rjmp	.-98     	; 0x2c8 <main+0x10>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
